// <auto-generated />
using System;
using MaShops.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MaShops.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MaShops.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AppartmentNo")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ZipCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppartmentNo = 60,
                            City = "Riyadh",
                            Country = "Saudi Arabia",
                            Street = "Tahlia Street"
                        },
                        new
                        {
                            Id = 2,
                            AppartmentNo = 30,
                            City = "Riyadh",
                            Country = "Saudi Arabia",
                            Street = "Al Sahafa Street"
                        },
                        new
                        {
                            Id = 3,
                            AppartmentNo = 25,
                            City = "Jeddah",
                            Country = "Saudi Arabia",
                            Street = "Hira Street"
                        });
                });

            modelBuilder.Entity("MaShops.Models.Banner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("PhotoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Banners");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PhotoPath = "/uploads/banner1.jpg",
                            Status = true
                        },
                        new
                        {
                            Id = 2,
                            PhotoPath = "/uploads/banner2.jpg",
                            Status = true
                        },
                        new
                        {
                            Id = 3,
                            PhotoPath = "/uploads/banner3.jpg",
                            Status = false
                        },
                        new
                        {
                            Id = 4,
                            PhotoPath = "/uploads/banner4.jpg",
                            Status = false
                        },
                        new
                        {
                            Id = 5,
                            PhotoPath = "/uploads/banner5.jpg",
                            Status = true
                        });
                });

            modelBuilder.Entity("MaShops.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 1
                        },
                        new
                        {
                            Id = 2,
                            CustomerId = 2
                        },
                        new
                        {
                            Id = 3,
                            CustomerId = 3
                        });
                });

            modelBuilder.Entity("MaShops.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Food"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Electronics"
                        });
                });

            modelBuilder.Entity("MaShops.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("HTMLDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InStock")
                        .HasColumnType("int");

                    b.Property<string>("MainPosterPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("NewPrice")
                        .HasColumnType("float");

                    b.Property<double?>("OldPrice")
                        .HasColumnType("float");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("StoreId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            HTMLDescription = "<p>Rolled in sesame seeds, and fried until crispy on the outside, but still soft and chewy on the inside, DIMSUMCO Sesame Peanut Ball (Vegetarian) are actually an irresistible treat.</p><ul><li><b><i>1 pkt of 12 pieces of Sesame Peanut Ball (Vegetarian).</i></b></li><li><b><i>Halal Certified</i></b></li><li><b><i>300g</i></b></li></ul>",
                            InStock = 5,
                            MainPosterPath = "/uploads/prod-1-main-poster.png",
                            Name = "DIMSUMCO Sesame Peanut Ball (Vegetarian) – (12’s) 300g",
                            NewPrice = 4.9900000000000002,
                            StoreId = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            HTMLDescription = "<ul> <li> Only compatible with iPad 9/8/7 (2021, 2020, 2019); Model numbers:A2602, A2604, A2603,A2605, A2270, A2428, A2429, A2430, A2197, A2200, A2198 </li> <li>Magnetic trifold stand supports both viewing and writing modes</li> <li>Instantly activate auto sleep/wake when you open or close the cover</li> <li>Front cover protects your screen from scratches while remaining slim</li> <li> Translucent matte back adds a colorful twist while leaving the logo visible </li> </ul>",
                            InStock = 7,
                            MainPosterPath = "/uploads/prod-2-main-poster.png",
                            Name = "ESR for iPad 9th Generation case(2021) Lightweight Hard Case,Auto Sleep/Wake, Ascend Series case for iPad 10.2 Inch, Lavender",
                            NewPrice = 11.99,
                            OldPrice = 17.989999999999998,
                            StoreId = 2
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            HTMLDescription = "<ul> <li> Keys-To-Go is a super-slim, super-light keyboard that you can keep with you through the day whether you’re working or learning from the backyard or back at the office. </li> <li> The sealed keyboard protects against crumbs, spills, and almost anything else you (or your kids) can throw at it, and wipes clean in seconds. </li> <li> Works with the screens you use most including iPhone, iPad, and Apple TV, and even comes with a convenient stand for your phone. </li> <li> Comfortable, soft keys type silently so you and the people around you can focus on working or learning without distractions. </li> <li> Full row of iOS shortcut keys provide one-tap access to popular functions like volume up/down, mute, media controls, and more. </li> <li> An easy one-time Bluetooth pairing provides a reliable connection between Keys-To-Go and your device. </li> <li> Type for up to 3 months without needing to recharge the battery so you can spend more time typing and less time wondering where you left that charging cable. </li> </ul>",
                            InStock = 5,
                            MainPosterPath = "/uploads/prod-3-main-poster.jpg",
                            Name = "Logitech Keys-to-Go Super-Slim and Super-Light Bluetooth Keyboard for iPhone, iPad, Mac and Apple TV, Including iPad Air 5th Gen (2022) - Classic Blue",
                            NewPrice = 29.989999999999998,
                            OldPrice = 42.990000000000002,
                            StoreId = 3
                        });
                });

            modelBuilder.Entity("MaShops.Models.ProductCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductsCarts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CartId = 1,
                            ProductId = 1
                        },
                        new
                        {
                            Id = 2,
                            CartId = 2,
                            ProductId = 2
                        },
                        new
                        {
                            Id = 3,
                            CartId = 3,
                            ProductId = 3
                        });
                });

            modelBuilder.Entity("MaShops.Models.ProductPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPhotos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Path = "/uploads/prod1-photo1.jpg",
                            ProductId = 1
                        },
                        new
                        {
                            Id = 2,
                            Path = "/uploads/prod1-photo2.jpeg",
                            ProductId = 1
                        },
                        new
                        {
                            Id = 3,
                            Path = "/uploads/prod1-photo3.jpg",
                            ProductId = 1
                        },
                        new
                        {
                            Id = 4,
                            Path = "/uploads/prod2-photo1.jpg",
                            ProductId = 2
                        },
                        new
                        {
                            Id = 5,
                            Path = "/uploads/prod2-photo2.jpg",
                            ProductId = 2
                        },
                        new
                        {
                            Id = 6,
                            Path = "/uploads/prod2-photo3.jpg",
                            ProductId = 2
                        },
                        new
                        {
                            Id = 7,
                            Path = "/uploads/prod3-photo1.jpeg",
                            ProductId = 3
                        },
                        new
                        {
                            Id = 8,
                            Path = "/uploads/prod3-photo2.jpg",
                            ProductId = 3
                        },
                        new
                        {
                            Id = 9,
                            Path = "/uploads/prod3-photo3.jpeg",
                            ProductId = 3
                        });
                });

            modelBuilder.Entity("MaShops.Models.ProductReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductsReviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "Wow, this food product exceeded my expectations! The flavors are incredibly delicious and well-balanced. It's the perfect combination of sweet and savory. The texture is spot on, providing a delightful crunch with every bite. I highly recommend trying this. It has become my new favorite snack!",
                            CustomerId = 1,
                            Date = new DateTime(2023, 12, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            ProductId = 1,
                            Rating = 5
                        },
                        new
                        {
                            Id = 2,
                            Comment = "I recently purchased the ESR for iPad and have mixed feelings about it. On the positive side, it offers decent protection for my iPad and fits well, providing a snug and secure fit. The design is sleek and visually appealing. However, I did encounter a few drawbacks. The stand functionality could be improved as it feels a bit flimsy and doesn't always hold the iPad at the desired angle. Additionally, I noticed that the case tends to attract fingerprints easily, requiring frequent cleaning. Overall, it's an average product that offers basic protection but could use some enhancements in terms of functionality and fingerprint resistance.",
                            CustomerId = 2,
                            Date = new DateTime(2023, 12, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            ProductId = 2,
                            Rating = 3
                        },
                        new
                        {
                            Id = 3,
                            Comment = "The Logitech Keys-to-Go Bluetooth Keyboard for iPhone was a huge disappointment. Despite its sleek and slim design, the performance is severely lacking. The keys feel mushy and unresponsive, making typing a frustrating experience. Additionally, the Bluetooth connectivity is unreliable, frequently disconnecting and requiring constant reconnection. The battery life is abysmal, barely lasting a couple of hours before needing a recharge. It's incredibly disappointing to invest in a keyboard that falls so short in terms of usability and reliability. I would not recommend this product.",
                            CustomerId = 3,
                            Date = new DateTime(2023, 12, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            ProductId = 3,
                            Rating = 1
                        });
                });

            modelBuilder.Entity("MaShops.Models.ProductSave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("ProductSaves");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2023, 12, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            ProductId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2023, 12, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            ProductId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2023, 12, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            ProductId = 3,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("MaShops.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "Super Admin"
                        },
                        new
                        {
                            Id = 2,
                            Title = "Admin"
                        },
                        new
                        {
                            Id = 3,
                            Title = "Seller"
                        },
                        new
                        {
                            Id = 4,
                            Title = "Customer"
                        });
                });

            modelBuilder.Entity("MaShops.Models.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Sales");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 1,
                            DateTime = new DateTime(2023, 12, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            ProductId = 1
                        },
                        new
                        {
                            Id = 2,
                            CustomerId = 2,
                            DateTime = new DateTime(2023, 12, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            ProductId = 2
                        },
                        new
                        {
                            Id = 3,
                            CustomerId = 3,
                            DateTime = new DateTime(2023, 12, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            ProductId = 3
                        });
                });

            modelBuilder.Entity("MaShops.Models.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("PosterPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Stores");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Evergreen Emporium",
                            OwnerId = 4,
                            PosterPath = "/uploads/store-1-poster.jpg",
                            Status = true
                        },
                        new
                        {
                            Id = 2,
                            Name = "GizmoTech Hub",
                            OwnerId = 5,
                            PosterPath = "/uploads/store-2-poster.png",
                            Status = true
                        },
                        new
                        {
                            Id = 3,
                            Name = "iConnect Depot",
                            OwnerId = 6,
                            PosterPath = "/uploads/store-3-poster.jpeg",
                            Status = true
                        });
                });

            modelBuilder.Entity("MaShops.Models.StoreSave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.HasIndex("UserId");

                    b.ToTable("StoreSaves");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2023, 12, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            StoreId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2023, 12, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            StoreId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2023, 12, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            StoreId = 3,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("MaShops.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("Date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EncPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("ThirdName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 1,
                            BirthDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mohammedhamza@gmail.com",
                            EncPassword = "slSe@#VSs1532",
                            FirstName = "Mohammed",
                            LastName = "Hamza",
                            Nationality = "Saudi Arabia",
                            PhoneNumber = "00966532071000",
                            SecondName = "Khalid",
                            Status = true,
                            ThirdName = "Omar",
                            Username = "mohammedhamza"
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 2,
                            BirthDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "shaimaasalim@gmail.com",
                            EncPassword = "slSe@#fSF3",
                            FirstName = "Shaimaa",
                            LastName = "Salim",
                            Nationality = "Saudi Arabia",
                            PhoneNumber = "00966532071001",
                            SecondName = "Sameer",
                            Status = true,
                            ThirdName = "Osama",
                            Username = "shaimaasalim"
                        },
                        new
                        {
                            Id = 3,
                            AddressId = 3,
                            BirthDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "osamasameer@gmail.com",
                            EncPassword = "@#$FSAF@#",
                            FirstName = "Osama",
                            LastName = "Sameer",
                            Nationality = "Yemen",
                            PhoneNumber = "00966532071002",
                            SecondName = "Hamza",
                            Status = true,
                            ThirdName = "Salim",
                            Username = "osamasameer"
                        },
                        new
                        {
                            Id = 4,
                            AddressId = 3,
                            BirthDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mohammednaser@gmail.com",
                            EncPassword = "sF3#$Gs%#ss",
                            FirstName = "Mohammed",
                            LastName = "Naser",
                            Nationality = "Saudi Arabia",
                            PhoneNumber = "00966532071003",
                            SecondName = "Khalid",
                            Status = true,
                            ThirdName = "Osama",
                            Username = "mohammednaser"
                        },
                        new
                        {
                            Id = 5,
                            AddressId = 2,
                            BirthDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "khalidamer@gmail.com",
                            EncPassword = "Sfe34%#2#5%",
                            FirstName = "Khalid",
                            LastName = "Osama",
                            Nationality = "Yemen",
                            PhoneNumber = "00966532071004",
                            SecondName = "Naser",
                            Status = true,
                            ThirdName = "Amer",
                            Username = "khalidamer"
                        },
                        new
                        {
                            Id = 6,
                            AddressId = 1,
                            BirthDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mahmoudmansour@gmail.com",
                            EncPassword = "@#FsdE323#",
                            FirstName = "Mahmoud",
                            LastName = "Mansour",
                            Nationality = "Yemen",
                            PhoneNumber = "00966532071005",
                            SecondName = "Khalid",
                            Status = true,
                            ThirdName = "Osama",
                            Username = "mahmoudmansour"
                        },
                        new
                        {
                            Id = 7,
                            AddressId = 2,
                            BirthDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "abdullahsaleh@gmail.com",
                            EncPassword = "234SDFe3#$",
                            FirstName = "Abdullah",
                            LastName = "Saleh",
                            Nationality = "Yemen",
                            PhoneNumber = "00966532071006",
                            SecondName = "Mansour",
                            Status = true,
                            ThirdName = "Mahmoud",
                            Username = "abdullahsaleh"
                        },
                        new
                        {
                            Id = 8,
                            AddressId = 2,
                            BirthDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "hattanfaisal@gmail.com",
                            EncPassword = "&%sdfSE323",
                            FirstName = "Hattan",
                            LastName = "Faisal",
                            Nationality = "Saudi Arabia",
                            PhoneNumber = "00966532071007",
                            SecondName = "Mahmoud",
                            Status = true,
                            ThirdName = "Mansour",
                            Username = "hattanfaisal"
                        },
                        new
                        {
                            Id = 9,
                            AddressId = 3,
                            BirthDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "somayahomar@gmail.com",
                            EncPassword = "((^77456FDg3",
                            FirstName = "Somayah",
                            LastName = "Omar",
                            Nationality = "Saudi Arabia",
                            PhoneNumber = "00966532071008",
                            SecondName = "Faisal",
                            Status = true,
                            ThirdName = "Mahmoud",
                            Username = "somayahomar"
                        },
                        new
                        {
                            Id = 10,
                            AddressId = 1,
                            BirthDate = new DateTime(2000, 12, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "masalah.tech@gmail.com",
                            EncPassword = "M@zen852",
                            FirstName = "Mazen",
                            LastName = "Salah",
                            Nationality = "Yemen",
                            PhoneNumber = "00967774806897",
                            PhotoPath = "/uploads/mazen2.png",
                            SecondName = "Ameen",
                            Status = true,
                            ThirdName = "Hamid",
                            Username = "masalah-tech"
                        });
                });

            modelBuilder.Entity("MaShops.Models.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleId = 4,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            RoleId = 4,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            RoleId = 4,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            RoleId = 3,
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            RoleId = 3,
                            UserId = 5
                        },
                        new
                        {
                            Id = 6,
                            RoleId = 3,
                            UserId = 6
                        },
                        new
                        {
                            Id = 7,
                            RoleId = 2,
                            UserId = 7
                        },
                        new
                        {
                            Id = 8,
                            RoleId = 2,
                            UserId = 8
                        },
                        new
                        {
                            Id = 9,
                            RoleId = 2,
                            UserId = 9
                        },
                        new
                        {
                            Id = 10,
                            RoleId = 1,
                            UserId = 10
                        });
                });

            modelBuilder.Entity("MaShops.Models.Cart", b =>
                {
                    b.HasOne("MaShops.Models.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("MaShops.Models.Product", b =>
                {
                    b.HasOne("MaShops.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MaShops.Models.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("MaShops.Models.ProductCart", b =>
                {
                    b.HasOne("MaShops.Models.Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MaShops.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MaShops.Models.ProductPhoto", b =>
                {
                    b.HasOne("MaShops.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MaShops.Models.ProductReview", b =>
                {
                    b.HasOne("MaShops.Models.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MaShops.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MaShops.Models.ProductSave", b =>
                {
                    b.HasOne("MaShops.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MaShops.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MaShops.Models.Sale", b =>
                {
                    b.HasOne("MaShops.Models.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MaShops.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MaShops.Models.Store", b =>
                {
                    b.HasOne("MaShops.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("MaShops.Models.StoreSave", b =>
                {
                    b.HasOne("MaShops.Models.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MaShops.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Store");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MaShops.Models.User", b =>
                {
                    b.HasOne("MaShops.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("MaShops.Models.UserRole", b =>
                {
                    b.HasOne("MaShops.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MaShops.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
